public class Solution {
    public int maxArea(int[] height) {
        /*方法：用两个指针从两端开始向中间靠拢，如果左端线段短于右端，那么左端右移
        反之右端左移，直到左右两端移到中间重合，记录这个过程中每一次组成木桶的容积，
        回其中最大的。
        
        解释：当左端线段L小于右端线段R时，我们把L右移，这时舍弃的是L与右端
        他线段（R-1, R-2, ...）组成的木桶，这些木桶是没必要判断的，为这些木桶的容积
        定都没有L和R组成的木桶容积大*/
        
        if(height.length<2) return 0;
        int ans=0;
        int l=0;
        int r=height.length-1;
        while(l<r){
            int v=(r-l)*Math.min(height[l],height[r]);
            if(v>ans) ans=v;
            if(height[l]<height[r]){
                l++; //右移
            }else{
                r--; //左移
            }
        }
        return ans;
        
    }
}